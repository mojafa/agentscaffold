"""Main entry point for {{agent_name}} agent."""

import asyncio
import json
import os
import sys
from typing import Dict, Any, Optional
import argparse

# Add the current directory to the path to help with imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Try to load environment variables
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("Loaded environment variables from .env file")
except ImportError:
    print("Warning: python-dotenv not installed, using environment variables directly")

# Import the agent with error handling
try:
    print(f"Importing agent from {{package_name}}.agent")
    from {{package_name}}.agent import Agent
    print(f"Successfully imported Agent from {{package_name}}.agent")
except ImportError as e:
    print(f"Error importing Agent from {{package_name}}.agent: {e}")
    
    # Try alternative import
    try:
        print("Trying to import Agent from agent.py directly")
        from agent import Agent
        print("Successfully imported Agent from agent.py")
    except ImportError as e2:
        print(f"Could not import Agent from agent.py either: {e2}")
        sys.exit(1)

async def process_message(agent: Agent, message: str, search_query: Optional[str] = None, 
                        context: bool = False, context_query: Optional[str] = None) -> Dict[str, Any]:
    """
    Process a message with the agent.
    
    Args:
        agent: Agent instance
        message: Message to process
        search_query: Optional search query to include with the message
        context: Whether to retrieve context from memory
        context_query: Optional query for context retrieval
        
    Returns:
        Agent response
    """
    # Create input data
    input_data = {
        "message": message,
        "context": {}
    }
    
    # Add search query if provided
    if search_query:
        input_data["context"]["search_query"] = search_query
    
    # Add context retrieval if requested
    if context:
        input_data["context"]["retrieve_context"] = True
        if context_query:
            input_data["context"]["context_query"] = context_query
    
    # Process message
    print(f"Processing message: {message[:50]}...")
    print(f"Processing with {agent.name} agent...")
    
    # Run the agent
    try:
        result = await agent.run(input_data)
        return result
    except Exception as e:
        print(f"Error running agent: {e}")
        import traceback
        traceback.print_exc()
        
        # Fallback response
        return {
            "response": f"I encountered an error processing your request: {str(e)}",
            "metadata": {"error": True}
        }

async def interactive_mode(agent: Agent):
    """Run the agent in interactive mode."""
    print(f"Starting interactive session with {agent.name}...")
    print(f"Type 'exit' or 'quit' to end the session")
    print(f"Type 'search: <query>' to include a search query")
    print(f"Type 'context: <query>' to retrieve context")
    print()
    
    while True:
        # Get input from the user
        user_input = input("> ")
        
        # Check for exit command
        if user_input.lower() in ["exit", "quit"]:
            print("Exiting interactive session")
            break
        
        # Check for search command
        search_query = None
        if user_input.lower().startswith("search: "):
            search_query = user_input[8:].strip()
            user_input = input("Message: ")
        
        # Check for context command
        context = False
        context_query = None
        if user_input.lower().startswith("context: "):
            context = True
            context_query = user_input[9:].strip()
            user_input = input("Message: ")
        
        # Process the message
        result = await process_message(agent, user_input, search_query, context, context_query)
        
        # Print the response
        print(f"\n{result['response']}\n")

async def main():
    """Main entry point."""
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="{{description}}")
    parser.add_argument("--message", "-m", help="Message to process")
    parser.add_argument("--interactive", "-i", action="store_true", help="Run in interactive mode")
    parser.add_argument("--search", "-s", help="Search query")
    parser.add_argument("--context", "-c", action="store_true", help="Retrieve context from memory")
    parser.add_argument("--context-query", help="Query for context retrieval")
    
    args = parser.parse_args()
    
    # Initialize the agent
    try:
        print("Initializing agent...")
        agent = Agent()
        print(f"Agent initialized: {agent.name}")
        
        # Set your Daytona environment variables in .env file
        # Alternatively, you can set them here:
        # os.environ["DAYTONA_API_KEY"] = "your-api-key"
        # os.environ["DAYTONA_SERVER_URL"] = "your-server-url"
        # os.environ["DAYTONA_TARGET"] = "us"
    except Exception as e:
        print(f"Error initializing agent: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    
    # Run in interactive mode if requested
    if args.interactive:
        await interactive_mode(agent)
        return
    
    # Process a single message if provided
    if args.message:
        try:
            result = await process_message(agent, args.message, args.search, args.context, args.context_query)
            print("Response:")
            print(result["response"])
            
            # Print additional information if available
            if "metadata" in result and result["metadata"]:
                print("\nAdditional Information:")
                for key, value in result["metadata"].items():
                    if key != "error":  # Skip error key as it's usually not meaningful to show
                        print(f"  {key}: {value}")
        except Exception as e:
            print(f"Error processing message: {e}")
            import traceback
            traceback.print_exc()
    else:
        # If no message or interactive mode, use a demo message
        demo_message = "Hello, I'd like to know more about {{agent_name}}."
        print(f"No message provided. Using demo message: {demo_message}")
        
        try:
            result = await process_message(agent, demo_message)
            print("\nResponse:")
            print(f"  {result['response']}")
            
            if result.get('metadata'):
                print("\nMetadata:")
                for key, value in result['metadata'].items():
                    if key != "error":
                        print(f"  {key}: {value}")
        except Exception as e:
            print(f"Error processing demo message: {e}")
            import traceback
            traceback.print_exc()
    
    # Return the result for Daytona runtime
    return result

if __name__ == "__main__":
    asyncio.run(main())